---
extends: http://vwf.example.com/scene.vwf
properties:
  keyPressInfo:
  paddleSpeed: 2.5 
methods:
  initializeCamera:
  initializeGame:
  update:
  movePlayer:
children:
  playerOne:
    extends: http://vwf.example.com/node3.vwf
    source: paddle.dae
    properties:
      translation: [ -470, 0, 0 ]
    children:
      paddleMaterial:
        extends: http://vwf.example.com/material.vwf
        properties:
          color: "#ff0000"
  playerTwo:
    extends: http://vwf.example.com/node3.vwf
    source: paddle.dae
    children:
      material:
        extends: http://vwf.example.com/material.vwf
        properties:
          color: "#ff0000"
  ball:
    extends: http://vwf.example.com/node3.vwf
    source: ball.dae
    properties:
      xSpeed: 3
      ySpeed: 1.5
      paddleExtent: 36
    methods:
      bounce: |
        var topX = 231;
        var topY = 145;
        var bottomY = -145;
        var bottomX = -220;
        var trans = this.translation;
        var newTrans = [ trans[ 0 ] + this.xSpeed, trans[ 1 ] + this.ySpeed, trans[ 2 ] ];

        // Did we hit a wall?
        if ( newTrans[ 1 ] >= topY ) {
          newTrans[ 1 ] = topY;
          this.ySpeed = -this.ySpeed;
        } else if ( newTrans[ 1 ] <= bottomY ) {
          newTrans[ 1 ] = bottomY;
          this.ySpeed = -this.ySpeed;
        }

        // Did we hit a paddle?
        if ( newTrans[ 0 ] >= topX ) {
          var yPos = this.parent.playerTwo.translation[ 1 ];
          if ( newTrans[ 1 ] > ( yPos + this.paddleExtent ) || newTrans[ 1 ] < ( yPos - this.paddleExtent ) ) {
            this.reset();
            return;
          } else {
            newTrans[ 0 ] = topX;
            this.xSpeed = -this.xSpeed;
          }
        } else if ( newTrans[ 0 ] < bottomX ) {
          yPos = this.parent.playerOne.translation[ 1 ];
          if ( newTrans[ 1 ] > ( yPos + this.paddleExtent ) || newTrans[ 1 ] < ( yPos - this.paddleExtent ) ) {
            this.reset();
            return;
          } else {
            newTrans[ 0 ] = bottomX;
            this.xSpeed = -this.xSpeed;
          }
        }
        this.translateTo( newTrans );
      reset: |
        this.translateTo( [ 0, 0, 0 ] );
        this.xSpeed = 2;
        this.ySpeed = 5;
    children:
      material:
        extends: http://vwf.example.com/material.vwf
        properties:
          color: "#0000ff"
  board:
    extends: http://vwf.example.com/node3.vwf
    source: board.dae
  light:
    extends: http://vwf.example.com/light.vwf
    properties:
      distance: 2000
      translation: [ 400, -400, 900 ]
scripts:
- |
    this.initialize = function() {
      this.future( 0 ).initializeCamera();
      this.future( 0 ).initializeGame();
    }
    this.initializeCamera = function() {
      this.camera.translation = [ 250, -550, 150 ];
      this.camera.rotation = [ 1, 0, 0, -10 ];

      // Disable navigation
      this.camera.touchmode = "none";
      this.camera.navmode = "none";
    }
    this.initializeGame = function() {
      this.update();
    }
    this.update = function() {
      this.ball.bounce();

      if ( this.keyPressInfo ) {
        for ( var keyPress in this.keyPressInfo.keysDown ) {
          switch( keyPress ) {
            case 'R':
              this.movePlayer( this.playerOne, +1 );
              break;
            case 'F':
              this.movePlayer( this.playerOne, -1 );
              break;
            case 'O':
              this.movePlayer( this.playerTwo, +1 );
              break;
            case 'L':
              this.movePlayer( this.playerTwo, -1 );
              break;
            default:
              break;
          }
        }
      }

      this.future( 1.0/60.0 ).update();  // schedule the next step
    }
    this.keyDown = this.keyUp = function( input ) {
      this.keyPressInfo = input;
    }
    this.movePlayer = function( player, direction ) {
      var amount = direction * this.paddleSpeed;
      if ( player.translation[ 1 ] + amount >= 120 || player.translation[ 1 ] + amount <= -120 ) {
        player.translateTo( [ player.translation[ 0 ], 120 * direction, 0 ] );
        return;
      }
      player.translateBy( [ 0, direction * this.paddleSpeed, 0 ] );
    }
